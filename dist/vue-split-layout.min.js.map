{"version":3,"file":"vue-split-layout.min.js","sources":["../src/Split.vue","../src/Tree.js","../src/Layout.vue","../src/Pane.vue"],"sourcesContent":["<template>\r\n  <div :class=\"splitClass\">\r\n    <div class=\"content\" :style=\"{ 'flex-basis': state.split }\">\r\n      <slot name=\"first\"></slot>\r\n    </div>\r\n    <div class=\"splitter\" @mousedown=\"startResize\"></div>\r\n    <div class=\"content\">\r\n      <slot name=\"second\"></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './Split.css';\r\nexport default {\r\n  name: 'Split',\r\n  props: {\r\n    resizeable: { type: Boolean, default: false },\r\n    dir: { type: String, default: 'horizontal' },\r\n    split: { type: String, default: '50%' }\r\n  },\r\n  data() {\r\n    return {\r\n      state: {\r\n        resizing: false,\r\n        split: this.split\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    splitClass() {\r\n      return [\r\n        'split',\r\n        this.dir,\r\n        this.state.resizing ? 'resizing' : '',\r\n        this.resizeable ? 'resizeable' : ''\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    startResize(event) {\r\n      if (!this.resizeable || event.button !== 0) return\r\n      event.preventDefault()\r\n      this.state.resizing = true\r\n      const drag = (e) => {\r\n        const horizontal = this.dir === 'horizontal'\r\n        const splitterSize = (horizontal ? this.$el.children[1].clientWidth : this.$el.children[1].clientHeight) / 2\r\n        const parentRect = this.$el.getBoundingClientRect()\r\n        const newSize = horizontal\r\n          ? (e.clientX - parentRect.left - splitterSize) / this.$el.clientWidth * 100\r\n          : (e.clientY - parentRect.top - splitterSize) / this.$el.clientHeight * 100\r\n        this.state.split = newSize + '%'\r\n      }\r\n      const stopResize = () => {\r\n        this.state.resizing = false\r\n        document.removeEventListener('mousemove', drag)\r\n        document.removeEventListener('mouseup', stopResize)\r\n      }\r\n      document.addEventListener('mousemove', drag)\r\n      document.addEventListener('mouseup', stopResize)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","export default class Tree {\r\n  static gid = 0\r\n  constructor(tree) {\r\n    this.tree = tree || []\r\n  }\r\n  push(node) {\r\n    if (node.id === undefined) {\r\n      node.id = Tree.gid++\r\n    }\r\n    this.tree.push(node)\r\n    return node\r\n  }\r\n  findById(nodeId) {\r\n    return this.tree.find(n => n.id === nodeId)\r\n  }\r\n  childrenOf(parent) {\r\n    return this.tree.filter(k => k.parent === parent)\r\n  }\r\n  attachChild(target, position, child, size) {\r\n    if (child.id === undefined) {\r\n      child.id = Tree.gid++\r\n    }\r\n    size = size || 33\r\n    const targetIndex = this.tree.indexOf(target)\r\n    const newSplit = {\r\n      id: Tree.gid++,\r\n      type: 'split',\r\n      parent: target.parent,\r\n      dir: position % 2 === 0 ? 'vertical' : 'horizontal'\r\n    }\r\n    target.parent = newSplit\r\n    child.parent = newSplit\r\n    this.tree[targetIndex] = newSplit\r\n    if (position === 0 || position === 3) {\r\n      newSplit.split = size + '%'\r\n      this.tree.push(child, target)\r\n    } else {\r\n      newSplit.split = (100 - size) + '%'\r\n      this.tree.push(target, child)\r\n    }\r\n    return child\r\n  }\r\n}\r\nTree.from = function (tree) {\r\n  return new Tree(tree)\r\n}\r\n","<template>\r\n  <div :class=\"layoutClass\" ref=\"container\">\r\n    <div class=\"views\" :class=\"{ dragging: !!drag }\" ref=\"views\">\r\n      <component v-for=\"node in childrenOf(nodes[0])\" :is=\"renderNode(node)\" :key=\"node.id\" />\r\n    </div>\r\n    <div class=\"preview\" ref=\"preview\"></div>\r\n    <div :class=\"{ 'drag': true, dragging: !!drag }\" ref=\"drag\">\r\n      <div class=\"view\" v-if=\"drag\" :target-view=\"'view-' + drag.node.viewId\"></div>\r\n    </div>\r\n    <div style=\"display: none\">\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './Layout.css';\r\nimport Split from './Split.vue'\r\nimport Tree from './tree'\r\n\r\nexport default {\r\n  name: 'Layout',\r\n  props: {\r\n    edit: { type: Boolean, default: true },\r\n    resize: { type: Boolean, default: true },\r\n    splits: { type: [String, Number, Object], default: () => ({}) }\r\n  },\r\n  data() {\r\n    return {\r\n      nodes: this.calcSplits(),\r\n      drag: null,\r\n      savedNodes: null\r\n    }\r\n  },\r\n  computed: {\r\n    // Add layoutClass here\r\n    layoutClass() {\r\n      return {\r\n        'layout-container': true,\r\n        'edit-mode': this.edit,\r\n        'drag-mode': !!this.drag\r\n      };\r\n    }\r\n  },\r\n  watch: {\r\n    splits() {\r\n      this.nodes = this.calcSplits()\r\n    }\r\n  },\r\n  beforeUpdate() {\r\n    if (!this.$refs.container) return\r\n    const els = this.$refs.container.querySelectorAll('[target-view]')\r\n    Array.from(els).forEach((e) => {\r\n      const el = this.$refs.container.querySelector(`[src-view=${e.getAttribute('target-view')}]`)\r\n      if (el && el.children[0]) {\r\n        el.appendChild(e.children[0])\r\n      }\r\n    })\r\n  },\r\n  methods: {\r\n    calcSplits() {\r\n      const root = []\r\n      const tree = Tree.from(root)\r\n      const walk = (node) => {\r\n        if (node instanceof Object) {\r\n          const split = tree.push({ type: 'split', dir: node.dir, split: node.split })\r\n          walk(node.first).parent = split\r\n          walk(node.second).parent = split\r\n          return split\r\n        }\r\n        return tree.push({ type: 'view', viewId: node })\r\n      }\r\n      walk(this.splits)\r\n      return root\r\n    },\r\n    childrenOf(parent) {\r\n      return Tree.from(this.nodes).childrenOf(parent)\r\n    },\r\n    renderNode(node) {\r\n      if (node.type === 'split') {\r\n        return Split\r\n      } else {\r\n        return 'div'\r\n      }\r\n    },\r\n    onSplitResize(event, split, size) {\r\n      const nodeId = split.props['node-id']\r\n      const node = Tree.from(this.nodes).findById(nodeId)\r\n      node.split = size\r\n    },\r\n    previewPane(attach, targetDom, amount) {\r\n      if (attach === -1) {\r\n        this.$refs.preview.style.opacity = 0\r\n        return\r\n      }\r\n      if (!targetDom) return -1\r\n      amount = amount || 33\r\n      const size = amount / 100\r\n      const targetRect = targetDom.getBoundingClientRect()\r\n      const previewPos = {\r\n        left: targetRect.left,\r\n        top: targetRect.top,\r\n        width: targetRect.width,\r\n        height: targetRect.height\r\n      }\r\n      if (attach === 1) {\r\n        previewPos.left += previewPos.width - previewPos.width * size\r\n      } else if (attach === 2) {\r\n        previewPos.top += previewPos.height - previewPos.height * size\r\n      }\r\n      if (attach % 2 === 0) {\r\n        previewPos.height *= size\r\n      } else {\r\n        previewPos.width *= size\r\n      }\r\n      this.$refs.preview.style.opacity = 1\r\n      for (const key in previewPos) {\r\n        this.$refs.preview.style[key] = `${previewPos[key]}px`\r\n      }\r\n    },\r\n    onViewDragStart(e) {\r\n      if (e.button !== 0) return\r\n      const nodeIdAttr = e.target.hasAttribute('node-id')\r\n      const dragAttr = e.target.hasAttribute('pane-drag')\r\n      if (!nodeIdAttr && !dragAttr) return\r\n      let el = e.target\r\n      if (!nodeIdAttr) {\r\n        let viewDom = el\r\n        while (viewDom && viewDom.matches && !viewDom.hasAttribute('node-id')) {\r\n          viewDom = viewDom.parentNode\r\n        }\r\n        if (!viewDom || !viewDom.matches) return\r\n        el = viewDom\r\n      }\r\n      const nodeId = parseInt(el.getAttribute('node-id'), 10)\r\n      const node = this.nodes.find((n) => n.id === nodeId)\r\n      if (!node) return\r\n\r\n      e.preventDefault()\r\n      const containerRect = this.$refs.container.getBoundingClientRect()\r\n      const trect = e.target.getBoundingClientRect()\r\n\r\n      this.drag = { node, offset: { x: e.clientX - trect.left, y: e.clientY - trect.top } }\r\n      this.savedNodes = structuredClone(this.nodes)\r\n      Tree.from(this.nodes).removeChild(node)\r\n\r\n      this.$refs.drag.style.top = `${trect.y - containerRect.top}px`\r\n      this.$refs.drag.style.left = `${trect.x - containerRect.left}px`\r\n      this.$refs.drag.style.width = `${trect.width}px`\r\n      this.$refs.drag.style.height = `${trect.height}px`\r\n\r\n      document.addEventListener('mousemove', this.onViewDrag)\r\n      document.addEventListener('mouseup', this.onViewDrop)\r\n    },\r\n    onViewDrag(e) {\r\n      if (e.button !== 0) return\r\n      const containerRect = this.$refs.container.getBoundingClientRect()\r\n      const rel = {\r\n        x: e.clientX - containerRect.left,\r\n        y: e.clientY - containerRect.top\r\n      }\r\n      this.$refs.drag.style.left = `${rel.x - this.drag.offset.x}px`\r\n      this.$refs.drag.style.top = `${rel.y - this.drag.offset.y}px`\r\n      this.$refs.drag.style.pointerEvents = 'none'\r\n      const el = document.elementFromPoint(e.clientX, e.clientY)\r\n      this.$refs.drag.style.pointerEvents = null\r\n\r\n      let viewDom = el\r\n      while (viewDom && !viewDom.matches('.view')) {\r\n        viewDom = viewDom.parentNode\r\n      }\r\n      if (!viewDom || !viewDom.matches) {\r\n        this.previewPane(-1)\r\n        return\r\n      }\r\n\r\n      const attach = this.checkAttach(viewDom, e)\r\n      if (attach !== -1) {\r\n        this.drag.over = { viewDom, attach }\r\n      }\r\n      this.previewPane(attach, viewDom)\r\n    },\r\n    onViewDrop(e) {\r\n      if (e.button !== 0) return\r\n      document.removeEventListener('mousemove', this.onViewDrag)\r\n      document.removeEventListener('mouseup', this.onViewDrop)\r\n\r\n      this.previewPane(-1)\r\n      if (!this.drag.over) {\r\n        this.drag = null\r\n        this.nodes = this.savedNodes\r\n        return\r\n      }\r\n\r\n      const { viewDom, attach } = this.drag.over\r\n      const nodeId = parseInt(viewDom.getAttribute('node-id'), 10)\r\n      const tree = Tree.from(this.nodes)\r\n      const node = tree.findById(nodeId)\r\n      tree.attachChild(node, attach, this.drag.node)\r\n      this.drag = null\r\n    },\r\n    checkAttach(targetDom, e, amount = 33) {\r\n      const size = amount / 100\r\n      const trect = targetDom.getBoundingClientRect()\r\n      const tW = trect.width * size\r\n      const tH = trect.height * size\r\n      const rPos = { x: e.clientX - trect.left, y: e.clientY - trect.top }\r\n\r\n      const pos = [\r\n        rPos.y - tH,\r\n        (trect.width - tW) - rPos.x,\r\n        (trect.height - tH) - rPos.y,\r\n        rPos.x - tW\r\n      ]\r\n      let min = 0\r\n      let minI = -1\r\n      pos.forEach((v, i) => {\r\n        if (v < min) {\r\n          min = v\r\n          minI = i\r\n        }\r\n      })\r\n      return minI\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>\r\n","<template>\r\n  <div class=\"pane\">\r\n    <div class=\"header\">{{ title }}</div>\r\n    <div class=\"content\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport './Pane.css';\r\nexport default {\r\n  name: 'Pane',\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: ''\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style >\r\n\r\n</style>\r\n"],"names":["_sfc_main","name","props","resizeable","type","Boolean","default","dir","String","split","data","state","resizing","this","computed","splitClass","methods","startResize","event","button","preventDefault","drag","e","horizontal","splitterSize","$el","children","clientWidth","clientHeight","parentRect","getBoundingClientRect","newSize","clientX","left","clientY","top","stopResize","document","removeEventListener","addEventListener","_hoisted_1","class","_createElementBlock","createElementBlock","_normalizeClass","$options","_createElementVNode","style","_normalizeStyle","normalizeStyle","$data","_renderSlot","_ctx","$slots","onMousedown","args","createElementVNode","_Tree","constructor","tree","push","node","id","gid","findById","nodeId","find","n","childrenOf","parent","filter","k","attachChild","target","position","child","size","targetIndex","indexOf","newSplit","__publicField","Tree","from","edit","resize","splits","Number","Object","nodes","calcSplits","savedNodes","layoutClass","watch","beforeUpdate","$refs","container","els","querySelectorAll","Array","forEach","el","querySelector","getAttribute","appendChild","root","walk","first","second","viewId","renderNode","Split","onSplitResize","previewPane","attach","targetDom","amount","preview","opacity","targetRect","previewPos","width","height","key","onViewDragStart","nodeIdAttr","hasAttribute","dragAttr","viewDom","matches","parentNode","parseInt","containerRect","trect","offset","x","y","structuredClone","removeChild","onViewDrag","onViewDrop","rel","pointerEvents","elementFromPoint","checkAttach","over","tW","tH","rPos","pos","min","minI","v","i","ref","_hoisted_2","_hoisted_3","display","dragging","_openBlock","_Fragment","_renderList","renderList","_createBlock","_resolveDynamicComponent","_createCommentVNode","createCommentVNode","title","_toDisplayString","$props"],"mappings":"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"}